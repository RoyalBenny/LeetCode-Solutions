#T: O(1) S:(K)
class Node:
    def __init__(self,val):
        self.val = val
        self.next = None
class MyCircularQueue:

    def __init__(self, k: int):
        self.start = None
        self.end = None
        self.size = k
        self.current = 0
    def enQueue(self, value: int) -> bool:
        if self.isFull():
            return False
        self.current+=1
        if not self.start:
            self.start = Node(value)
            self.end = self.start
        else:
            self.end.next = Node(value)
            self.end = self.end.next
        return True
    def deQueue(self) -> bool:
        if self.isEmpty():
            return False
        self.current-=1
        self.start = self.start.next
        return True

    def Front(self) -> int:
        if self.isEmpty():
            return -1
        return self.start.val

    def Rear(self) -> int:
        if self.isEmpty():
            return -1
        return self.end.val

    def isEmpty(self) -> bool:
            return not self.current

    def isFull(self) -> bool:
        return self.current == self.size

# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()