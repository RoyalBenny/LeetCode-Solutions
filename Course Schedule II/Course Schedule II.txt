#T: O(V+E) S:O(V)
class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        output = []
        graph = defaultdict(list)
        visited = set()
        order = set()
        for s,e in prerequisites:
            graph[s].append(e)
            
        def dfs(node):
            if node in visited:
                return False
            if node in order:
                return True
            visited.add(node)
            for n in graph[node]:
                if not dfs(n): return False
            visited.remove(node)
            output.append(node)
            order.add(node)
            return True
        
        for i in range(numCourses):
            if not dfs(i):return []
        return output


#T: O(V+E) S: O(V+E)
class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        graph = collections.defaultdict(list)
        for c1,c2 in prerequisites:
            graph[c1].append(c2)
        visitedNode = set()
        output = []
        
        def dfs(key,visited):
            if key in visited:
                return False
            if key not in graph  or key in visitedNode:
                return True
            visited.add(key)
            for c in graph[key]:
                if not dfs(c,visited):
                    return False
            visited.remove(key)
            output.append(key)
            visitedNode.add(key)
            return True
        
        for i in range(numCourses):
            if i  not in graph:
                visitedNode.add(i)
                output.append(i)
                
        for i in graph:
            if not dfs(i,set()):
                return []
        
        
        return output