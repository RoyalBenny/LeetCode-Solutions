# T:O(N+M) S:O(M)
class Solution:
    def minWindow(self, s: str, t: str) -> str:
        if len(t)>len(s):
            return ""
        target = collections.Counter(t)
        targetCount = len(target)
        actual = collections.defaultdict(int)
        actualCount = 0
        l=r=0
        output = (0,0)
        outputLen = float('inf')
        while r<len(s):
            while actualCount<targetCount and r<len(s):
                ch = s[r]
                if ch in target:
                    actual[ch]+=1
                    if actual[ch] == target[ch]:
                        actualCount+=1
                r+=1
            while actualCount==targetCount and l<r:
                if r-l<outputLen:
                    output = (l,r)
                    outputLen = r-l
                ch = s[l]
                if ch in target:
                    if actual[ch] == target[ch]:
                        actualCount-=1
                    actual[ch]-=1
                l+=1
        return s[output[0]:output[1]]