#Time: O(depth)
#Space:O(depth)
#tree
#https://leetcode.com/problems/minimum-depth-of-binary-tree/
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def minDepth(self, node: Optional[TreeNode],depth = 0) -> int:
        if not node:
            return depth
        depth+=1
        if not node.left and not node.right:
            return depth
        leftD,rightD = float('Inf'),float('Inf')
        if node.left:
            leftD = self.minDepth(node.left,depth)
        if node.right:
            rightD = self.minDepth(node.right,depth)
        return min(leftD,rightD)
        