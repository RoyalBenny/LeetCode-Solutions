#Time: O(NM)
#Space: O(NM)
#DFS 
#https://leetcode.com/problems/island-perimeter/submissions/
class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        
        def findOne(grid):
            for i, row in enumerate(grid):
                for j, col in enumerate(row):
                    if col==1:
                        return (i,j)
        
        row,col = len(grid),len(grid[0])
        i,j = findOne(grid)
        stack = [(i,j)]
        grid[i][j] = 2
        sum = 0
        while stack:
            i,j = stack.pop(-1)
            total=4
            if i+1< row and grid[i+1][j] != 0:
                total-=1
                if grid[i+1][j] == 1:
                    grid[i+1][j]= 2
                    stack.append((i+1,j))
                    
            if i-1>=0 and grid[i-1][j] != 0:
                total-=1
                if  grid[i-1][j] == 1:
                    grid[i-1][j]= 2
                    stack.append((i-1,j))
                    
            if j+1<col and grid[i][j+1] != 0:
                total-=1
                if grid[i][j+1] == 1:
                    grid[i][j+1]= 2
                    stack.append((i,j+1)) 
                    
            if j-1>=0 and grid[i][j-1] != 0:
                total-=1
                if  grid[i][j-1] == 1:
                    grid[i][j-1]= 2
                    stack.append((i,j-1))
            sum+=total
            
        return sum
            