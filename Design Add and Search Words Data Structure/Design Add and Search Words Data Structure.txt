#T: size of word S: O(trie depth)
#https://leetcode.com/problems/design-add-and-search-words-data-structure/
class WordDictionary:

    def __init__(self):
        self.root = Trie()

    def addWord(self, word: str) -> None:
        node = self.root
        for i in word:
            if i not in node.children:
                node.children[i] = Trie()
            node = node.children[i]
        node.isPresent = True

    def search(self, word: str) -> bool:
        def backtrack(node,pos):
            if not node:
                return False
            if pos == len(word):
                return node.isPresent
            ch = word[pos]
            if ch in node.children:
                return backtrack(node.children[ch],pos+1)
            elif ch == ".":
                for i in node.children:
                    if backtrack(node.children[i],pos+1):
                        return True
            return False
        return backtrack(self.root,0)
    
class Trie:
    def __init__(self):
        self.children = collections.defaultdict(list)
        self.isPresent = False

# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)