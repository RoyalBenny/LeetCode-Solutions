#T: O(N*M*(NM)^4) S: O(NM)
#https://leetcode.com/problems/word-search/
class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        visited = [[False]*len(board[0]) for _ in range(len(board))]
        def check(i,j,pos):
            if pos == len(word):
                return True
            
            if i<0 or i==len(board) or j<0 or j==len(board[0]) or visited[i][j] or board[i][j]!=word[pos]:
                return False
            visited[i][j] = True
            pos+=1
            isPresent = check(i,j+1,pos) or check(i,j-1,pos) or check(i+1,j,pos) or check(i-1,j,pos)
            visited[i][j] = False
            return isPresent
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == word[0] and check(i,j,0):
                    return True
        return False