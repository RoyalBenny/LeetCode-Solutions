#T: O(N) S:O(k)
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        tempHead = head
        length = 0
        while tempHead:
            length+=1
            tempHead = tempHead.next
        multiples = length//k
        reversedHead = newHead = None
        queue = []
        while multiples:
            while len(queue) < k:
                queue.append(head)
                head = head.next
            if not newHead:
                newHead = queue.pop(-1)
                reversedHead = newHead
            else:
                newHead.next = queue.pop(-1)
                newHead = newHead.next
            while queue:
                newHead.next = queue.pop(-1)
                newHead = newHead.next
            multiples-=1
        newHead.next = head
        return reversedHead