#T: O(NMK) S:O(NMK)
class Solution:
    def shortestPath(self, grid: List[List[int]], k: int) -> int:
        
        ROWS,COLS = len(grid)-1,len(grid[0])-1
        q = deque([(0,0,k,0)])
        visited = set((0,0,k))
        while q:
            r,c,m,st = q.popleft()
            if r == ROWS and c == COLS:
                return st
            st+=1
            if (r,c,m) in visited:
                continue
            for nr,nc in [(r+1,c),(r-1,c),(r,c+1),(r,c-1)]:
                if (not 0<=nr<=ROWS 
                    or not 0<= nc<=COLS 
                    or (grid[nr][nc] ==1 and m == 0) 
                   ):
                    continue
                if grid[nr][nc] == 1: 
                    q.append((nr,nc,m-1,st))
                else:
                    q.append((nr,nc,m,st))
            visited.add((r,c,m))
            
        return -1

# Solution Roval TLE
# 30-10-2022

class Solution:
    def shortestPath(self, grid: List[List[int]], k: int) -> int:
        
        ROWS = len(grid)-1
        COLS = len(grid[0])-1
        dp = {}
        def backtrack(r,c,obs):
            if (r,c,obs) in dp:
                return dp[(r,c,obs)]
            if r == ROWS and c == COLS:
                return 0
            if r<0 or c<0 or r>ROWS or c>COLS or grid[r][c]==2:
                return float('inf')
            if grid[r][c]==1:
                if not obs:
                    return float('inf')
                obs-=1
            temp = grid[r][c]
            grid[r][c] = 2
            ans = 1 + min(backtrack(r-1,c,obs),backtrack(r,c-1,obs),backtrack(r+1,c,obs),backtrack(r,c+1,obs))
            grid[r][c] = temp
            dp[(r,c,obs)] = ans
            return ans
        result =  backtrack(0,0,k)
        if result==float('inf'):
            return -1
        return result