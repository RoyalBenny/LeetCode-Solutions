#T: O(NlogK) S: O(N)
from heapq import heapify,heappop
class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        counter = collections.Counter(words)
        heap = [(count*-1,word) for word,count in counter.items()]
        heapify(heap)
        output= []
        for i in range(k):
            output.append(heappop(heap)[1])
        return output


from collections import Counter
from heapq import heappop,heapify
class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        counter = Counter(words)
        count = {}
        for i in counter:
            if counter[i] not in count:
                count[counter[i]] = [i]
            else:
                count[counter[i]].append(i)
        heapcount = list(count.keys())
        heapq._heapify_max(heapcount)
        output = []
        while(k>0):
            v = heapq._heappop_max(heapcount)
            temp = []
            for i in count[v]:
                temp.append(i)
            heapify(temp)
            while(len(temp)>0):
                output.append(heappop(temp))
                k-=1
                if k==0:
                    return output
        return output