#T:O(N) S:O(N)
class Solution:
    def longestSubarray(self, nums: List[int], limit: int) -> int:
        minQ, maxQ = deque(),deque()
        l =r = 0
        
        def popUntilL(queue):
            while queue and queue[0]<l:
                queue.popleft()
        output = 1
        while r<len(nums):
            popUntilL(minQ)
            popUntilL(maxQ)
            while minQ and nums[minQ[-1]]>=nums[r]:
                minQ.pop()
            minQ.append(r)
            while maxQ and nums[maxQ[-1]]<=nums[r]:
                maxQ.pop()
            maxQ.append(r)
            if nums[maxQ[0]]-nums[minQ[0]]<=limit:
                output = max(output,r-l+1)
                r+=1
            else:
                l+=1
        return output