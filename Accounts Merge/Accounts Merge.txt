# T: O(N+ V*E) S: O(N + V*E)

class Solution:
    def accountsMerge(self, accounts: List[List[str]]) -> List[List[str]]:
        union = [-1]*len(accounts)
        emailMap = dict()
        def findParent(index):
            while union[index] != -1:
                index = union[index]
            return index
        
        for index,account in enumerate(accounts):
            for email in account[1:]:
                if email not in emailMap or emailMap[email] == index:
                    emailMap[email] = index
                else:
                    parent1 = findParent(index)
                    parent2 = findParent(emailMap[email])
                    if parent1 != parent2:
                        union[parent1] = parent2
                    
        mergedEmails = [[] for _ in range(len(accounts))]
        for email,parent in emailMap.items():
            while union[parent] != -1:
                parent = union[parent]
            mergedEmails[parent].append(email)
        output = []
        for index,emails in enumerate(mergedEmails):
            if emails:
                output.append([accounts[index][0]]+sorted(emails))
        return output
'''
[["John","johnsmith@mail.com","john_newyork@mail.com"],["John","johnsmith@mail.com","john00@mail.com"],["Mary","mary@mail.com"],["John","johnnybravo@mail.com"]]
[["Gabe","Gabe0@m.co","Gabe3@m.co","Gabe1@m.co"],["Kevin","Kevin3@m.co","Kevin5@m.co","Kevin0@m.co"],["Ethan","Ethan5@m.co","Ethan4@m.co","Ethan0@m.co"],["Hanzo","Hanzo3@m.co","Hanzo1@m.co","Hanzo0@m.co"],["Fern","Fern5@m.co","Fern1@m.co","Fern0@m.co"]]
[["Alex","Alex5@m.co","Alex4@m.co","Alex0@m.co"],["Ethan","Ethan3@m.co","Ethan3@m.co","Ethan0@m.co"],["Kevin","Kevin4@m.co","Kevin2@m.co","Kevin2@m.co"],["Gabe","Gabe0@m.co","Gabe3@m.co","Gabe2@m.co"],["Gabe","Gabe3@m.co","Gabe4@m.co","Gabe2@m.co"]]
[["David","David0@m.co","David1@m.co"],["David","David3@m.co","David4@m.co"],["David","David4@m.co","David5@m.co"],["David","David2@m.co","David3@m.co"],["David","David1@m.co","David2@m.co"]]

'''