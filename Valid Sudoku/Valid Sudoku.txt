# Solution Roval T:O(9*9) S:O(9)
# 06-09-2022

class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        def validateBox(row,col):
            val = set()
            for i in range(row,row+3):
                for j in range(col,col+3):
                    if board[i][j]=='.':
                        continue
                    if board[i][j] in val:
                        return False
                    val.add(board[i][j])
            return True
        row = set()
        col = set()
        for i in range(9):
            for j in range(9):
                if board[i][j]!='.' and board[i][j] in row:
                    return False
                elif board[i][j]!='.':
                    row.add(board[i][j])
                if board[j][i]!='.' and board[j][i] in col:
                    return False
                elif board[j][i]!='.':
                    col.add(board[j][i])
            row.clear()
            col.clear()
        
        for row in range(0,9,3):
            for col in range(0,9,3):
                if not validateBox(row,col):
                    return False
        return True

#T: O(9*9) S:O(9*9)
class Solution:
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        for i in range(9):
            visited = set()
            for j in range(9):
                if board[i][j] == '.':
                    continue
                elif board[i][j] in visited:
                    return False
                visited.add(board[i][j])
        for i in range(9):
            visited = set()
            for j in range(9):
                if board[j][i]=='.':
                    continue
                elif board[j][i] in visited:
                    return False
                visited.add(board[j][i])
        
        def square(row1,col1,row2,col2):
            visited = set()
            for i in range(row1,row2+1):
                for j in range(col1,col2+1):
                    if board[i][j] == '.':
                        continue
                    elif board[i][j] in visited:
                        return False
                    visited.add(board[i][j])
            return True
        
        if (square(0,0,2,2) and square(0,3,2,5) and square(0,6,2,8) 
            and square(3,0,5,2) and square(3,3,5,5) and square(3,6,5,8)
           and square(6,0,8,2) and square(6,3,8,5) and square(6,6,8,8)):
            return True
        return False