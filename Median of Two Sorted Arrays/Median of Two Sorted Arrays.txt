#T: O(log(min n,m)) S:O(1)
class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        n1,n2 = (nums1,nums2) if len(nums1)<len(nums2) else (nums2,nums1)
        left = 0; right= len(n1)
        while left<=right:
            n1P = (left+right)//2
            n2P = (len(n1)+len(n2)+1)//2 - n1P
            
            n1Min = n1[n1P-1] if n1P>0 else float('-inf')
            n1Max = n1[n1P] if n1P<len(n1) else float('inf')
            
            n2Min = n2[n2P-1] if n2P>0 else float('-inf')
            n2Max = n2[n2P] if n2P<len(n2) else float('inf')
            
            if n1Min<=n2Max and n2Min<=n1Max:
                if (len(n1)+len(n2))%2==0:
                    return (max(n1Min,n2Min)+min(n1Max,n2Max))/2
                else:
                    return max(n1Min,n2Min)
            elif n1Min>n2Max:
                    right = n1P-1
            elif n2Min>n1Max:
                    left = n1P+1

#T: O(log min(x,y)) S: O(1)
class Solution:
    def findMedianSortedArrays(self, x: List[int], y: List[int]) -> float:
        if len(x)>len(y):
            x,y = y,x
        
        totalLen = (len(x)+len(y)+1)//2 # 1 is added beacuse it reduce the code for even and odd length array
        partitionX = partitionY = 0
        start,end = 0,len(x)
        while start<=end:
            partitionX = (start+end)//2
            partitionY = totalLen-partitionX
            maxXLeft = float('-inf') if partitionX == 0 else x[partitionX-1]
            minXRight = float('inf') if len(x) == partitionX else x[partitionX]
            
            maxYLeft = float('-inf') if partitionY == 0 else y[partitionY-1]
            minYRight = float('inf')if len(y) == partitionY else y[partitionY]
            
            if maxXLeft<=minYRight and maxYLeft<=minXRight:
                if (len(x)+len(y))%2 == 0:
                    return (max(maxXLeft,maxYLeft)+min(minXRight,minYRight))/2
                return float(max(maxXLeft,maxYLeft))
            elif maxXLeft>minYRight:
                end = partitionX-1
            else:
                start = partitionX+1