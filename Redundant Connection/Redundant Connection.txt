#T: O(n) S: O(N)

class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        parent = [-1]*(len(edges)+1)
        rank = [1]*(len(edges)+1)
        def findParent(edge):
            while parent[edge] != -1:
                edge = parent[edge]
            return edge

        for x,y in edges:
            p1,p2 = findParent(x),findParent(y)
            if p1 == p2:
                return [x,y]
            if rank[p1]>rank[p2]:
                parent[p2] = p1
                rank[p1]+=rank[p2]
            else:
                parent[p1] = p2
                rank[p2]+=rank[p1]

'''
[[1,2],[1,3],[2,3]]
[[1,2],[2,3],[3,4],[1,4],[1,5]]
[[1,4],[3,4],[1,3],[1,2],[4,5]]
'''