#T: O(N^2) S: O(N)
#https://leetcode.com/problems/longest-palindromic-substring/
class Solution:
    def longestPalindrome(self, s: str) -> str:
        def palindrome(l,r):
            while l>=0 and r<len(s) and s[l] == s[r]:
                l-=1
                r+=1
            return [r-l,l+1,r]
        
        maxStr =[0,0,0]
        for i in range(len(s)):
            c1 = palindrome(i,i)
            c2 = palindrome(i,i+1)
            if c1[0]> maxStr[0]:
                maxStr = c1
            if c2[0]>maxStr[0]:
                maxStr = c2
        return s[maxStr[1]:maxStr[2]]