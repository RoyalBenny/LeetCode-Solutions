#https://leetcode.com/problems/serialize-and-deserialize-bst/
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
from collections import deque
class Codec:

    def serialize(self, root: Optional[TreeNode]) -> str:
        """Encodes a tree to a single string.
        """
        output = ""
        queue = deque([root])
        while queue:
            node = queue.popleft()
            if not node:
                output+="Nx"
            else:
                output+= str(node.val)+'x'
                queue.append(node.left)
                queue.append(node.right)
        # print(output)
        return output
        

    def deserialize(self, data: str) -> Optional[TreeNode]:
        """Decodes your encoded data to tree.
        """
        if data[0] == 'N':
            return
        def findVal(i):
            val = ''
            while data[i]!='x':
                val+=data[i]
                i+=1
            return val,i+1
        
        def createNode(val):
            if val == 'N':
                return None
            return TreeNode(int(val))
        val,i = findVal(0)
        root = createNode(val)
        queue = deque([root])
        while i<len(data):
            node = queue.popleft()
            val,i = findVal(i)
            newNode = createNode(val)
            if newNode:
                node.left = newNode
                queue.append(newNode)
            val,i = findVal(i)
            newNode = createNode(val)
            if newNode:
                node.right = newNode
                queue.append(newNode)
        return root

# Your Codec object will be instantiated and called as such:
# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# tree = ser.serialize(root)
# ans = deser.deserialize(tree)
# return ans