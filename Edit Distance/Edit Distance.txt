#T: O(N^2) S:O(N^2) tabulation
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        dp = [[0]*(len(word2)+1) for _ in range(len(word1)+1)]
        for i in range(len(word1)-1,-1,-1):
            dp[i][-1] = dp[i+1][-1]+1
        for i in range(len(word2)-1,-1,-1):
            dp[-1][i] = dp[-1][i+1]+1
        for i in range(len(word1)-1,-1,-1):
            for j in range(len(word2)-1,-1,-1):
                if word1[i]==word2[j]:
                    dp[i][j] = dp[i+1][j+1]
                else:
                    dp[i][j] = min(dp[i+1][j],dp[i][j+1],dp[i+1][j+1])+1
        return dp[0][0]

#T: O(N^2) S:O(N^2) memoization
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        memo = {}
        def backtrack(i,j):
            if i==len(word1) or j == len(word2):
                return max(len(word1)-i,len(word2)-j)
            if (i,j) in memo:
                return memo[(i,j)]
            if word1[i]==word2[j]:
                memo[(i,j)] =  backtrack(i+1,j+1)
            else:
                
                memo[(i,j)] =  min(backtrack(i,j+1), #insert
                backtrack(i+1,j), #delete
                backtrack(i+1,j+1))+1 #replace
            return memo[(i,j)]
        return backtrack(0,0)