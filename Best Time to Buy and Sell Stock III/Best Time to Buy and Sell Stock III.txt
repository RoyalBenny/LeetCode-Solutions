#T: O(N) S:O(N)
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        def leftProfit(arr):
            left = [0]*len(arr)
            minP = arr[0]
            for i in range(1,len(arr)):
                left[i] = max(left[i-1],arr[i]-minP)
                if minP>arr[i]:
                    minP = arr[i]
            return left
        
        def rightProfit(arr):
            right = [0]*len(arr)
            maxP = arr[-1]
            for i in range(len(arr)-2,-1,-1):
                right[i] = max(right[i+1],maxP-arr[i])
                if arr[i]> maxP:
                    maxP = arr[i]
            return right
        
        left = leftProfit(prices)
        right = rightProfit(prices)
        maxProfit = right[0]
        for i in range(1,len(right)):
            maxProfit = max(maxProfit,left[i-1]+right[i])
        return max(maxProfit,left[-1])

#TLE
#T: O(N^2) S: O(N^2)
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        
        def bestProfit(arr):
            maxP = 0
            minPrice = float('inf')
            for i in arr:
                if i-minPrice>maxP:
                    maxP = i-minPrice
                elif i<minPrice:
                    minPrice = i
            return maxP
        maxProfit = 0
        for i in range(len(prices)):
            maxProfit = max(maxProfit,bestProfit(prices[0:i])+bestProfit(prices[i:]))
        return maxProfit