#T: O(1) S:O(size(LRU))
#https://leetcode.com/problems/lru-cache/
class Node:
    def __init__(self,key,val):
        self.key = key
        self.val = val
        self.prev = None
        self.next = None
class LRUCache:

    def __init__(self, capacity: int):
        self.capacity = capacity
        self.head = Node(-1,0)
        self.tail = Node(-1,0)
        self.head.next = self.tail
        self.tail.prev = self.head
        self.LRU = dict()
        

    def get(self, key: int) -> int:
        if key not in self.LRU:
            return -1
        node = self.LRU[key]
        self.remove(node)
        self.add(node)
        return node.val

    def put(self, key: int, value: int) -> None:
        if key in self.LRU:
            node = self.LRU[key]
            node.val = value
            self.remove(node)
            self.add(node)
            return
        if len(self.LRU) == self.capacity:
            node = self.head.next
            self.LRU.pop(node.key)
            self.remove(node)
        node = Node(key,value)
        self.LRU[key] =node
        self.add(node)
        
    
    def add(self,node):
        tail_prev = self.tail.prev
        node.next = self.tail
        node.prev = tail_prev
        tail_prev.next = node
        self.tail.prev = node
    
    
    def remove(self,node):
        node_prev = node.prev
        node_next = node.next
        node_prev.next = node_next
        node_next.prev  = node_prev


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)